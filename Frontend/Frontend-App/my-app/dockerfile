# Stage 1: Build the application
FROM node:20-alpine AS build



# Set the working directory for the build process
WORKDIR /app

# Copy only the package files to leverage Docker caching for dependencies
COPY package.json package-lock.json ./

# Install the dependencies
RUN npm install

# Copy the rest of the application files
COPY . .

# Copy the .env file to the working directory
COPY .env .env

# Build the application for production
RUN npm run build

# Stage 2: Serve the built application using Nginx
FROM nginx:alpine AS production

# Install a specific version of curl (optional, remove if not needed)
RUN apk --no-cache add curl=8.11.1-r0

# Create a non-root user and group for better security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Create the necessary directory for Nginx's cache and set proper permissions
RUN mkdir -p /var/cache/nginx/client_temp && \
    chown -R appuser:appgroup /var/cache/nginx

# Modify the Nginx configuration to use a different location for the PID file
RUN sed -i 's|/var/run/nginx.pid|/tmp/nginx.pid|' /etc/nginx/nginx.conf

# Copy the built application files from the build stage to the Nginx directory
COPY --from=build /app/dist /usr/share/nginx/html

# Copy the .env file from the build stage to the production stage (optional, for use in the Nginx container)
COPY --from=build /app/.env /usr/share/nginx/html/.env

# Copy your custom Nginx configuration file
COPY default.conf /etc/nginx/conf.d/default.conf

# Set proper ownership of the application files for the non-root user
RUN chown -R appuser:appgroup /usr/share/nginx/html

# Expose the port specified in your Nginx configuration (5173)
EXPOSE 5173

# Switch to the non-root user to run Nginx
USER appuser

# Start Nginx in the foreground to keep the container running
CMD ["nginx", "-g", "daemon off;"]
